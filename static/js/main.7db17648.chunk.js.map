{"version":3,"sources":["components/App/index.js","registerServiceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ReactGA","initialize","pageview","window","location","pathname","search","react_default","a","createElement","className","style","width","height","maxWidth","maxHeight","margin","dist","id","react_bashme_dist","options","welcomeMessage","providers","Json","require","GitHub","onInput","command","event","category","action","href","alt","index_esm","aria-label","role","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"stEA+DeA,sBAnDd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IAENQ,IAAQC,WAAW,kBAHDR,wEASlB,OAFAO,IAAQE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAG3DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,yDAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,SAAU,KAAMC,UAAW,IAAKC,OAAQ,SACpFT,EAAAC,EAAAC,cAACQ,EAAA,SAAD,CAAUC,GAAG,YACZX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACCC,QAAS,CACRC,eAAgB,sEAEjBC,UAAW,CACV,IAAIC,OAAKC,EAAQ,MACjB,IAAIC,SAAO,iBAEZC,QAAS,SAACC,GACT3B,IAAQ4B,MAAM,CAAEC,SAAU,iBAAkBC,OAAQH,UAMzDpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGsB,KAAK,kCAAkCC,IAAI,UAASzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,QAC3D1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGsB,KAAK,8BAAR,aAELxB,EAAAC,EAAAC,cAAA,WALD,iCAM0BF,EAAAC,EAAAC,cAAA,QAAMyB,aAAW,UAAUC,KAAK,OAAhC,sCA5CbC,cCAZC,EAAcC,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB7D,OAAOC,UAC3C6D,SAAW9D,OAAOC,SAAS6D,OAIvC,OAGF9D,OAAO+D,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEP3B,GAiDV,SAAiCK,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7B3C,OAAOC,SAASwE,aAKpBnC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAsB,CAAwBnC,GAIxBC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCzCxBoC","file":"static/js/main.7db17648.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport { FaGithub } from 'react-icons/fa';\nimport { Terminal } from 'react-window-ui';\n\nimport Bashme from 'react-bashme';\nimport { GitHub, Json } from 'react-bashme/dist/providers';\n\nimport './style.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tReactGA.initialize('UA-126193327-1');\n\t}\n\n\trender() {\n\t\tReactGA.pageview(window.location.pathname + window.location.search);\n\n\t\treturn (\n\t\t\t<div className='content'>\n\t\t\t\t<div className='flex-center-h'>\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<h1>agurodriguez</h1>\n\t\t\t\t\t\t<span>#coder #entrepreneur #optimist #dreamer</span>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t\t<div className='flex-center flex-grow'>\n\t\t\t\t\t<div style={{ width: '100%', height: '100%', maxWidth: 1024, maxHeight: 512, margin: 'auto' }}>\n\t\t\t\t\t\t<Terminal id='terminal'>\n\t\t\t\t\t\t\t<Bashme\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\twelcomeMessage: 'Welcome to my digital home. \\r\\nPlease type `help` to get started.'\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tproviders={[\n\t\t\t\t\t\t\t\t\tnew Json(require('../../data/agurodriguez.json')),\n\t\t\t\t\t\t\t\t\tnew GitHub('agurodriguez'),\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\tonInput={(command) => {\n\t\t\t\t\t\t\t\t\tReactGA.event({ category: 'bashme.command', action: command })}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Terminal>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='flex-center-h'>\n\t\t\t\t\t<footer>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li><a href=\"https://github.com/agurodriguez\" alt=\"GitHub\"><FaGithub /></a></li>\n\t\t\t\t\t\t\t<li><a href=\"mailto:me@agurodriguez.net\">Contact</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tcoded with a lot of ‚ù§ in <span aria-label='Uruguay' role='img'>üá∫üáæ</span>\n\t\t\t\t\t</footer>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}